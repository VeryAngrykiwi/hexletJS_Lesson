/*Задача
Реализуйте и экспортируйте по умолчанию функцию, которая определяет, является ли переданное число натуральной степенью тройки. Например, число 1 – это нулевая степень (считаем ноль натуральным числом): 3^0, число 27 — это третья степень: 3^3, а 81 — это четвёртая: 3^4.
*/

//chatGPT
const isPowerOfThree = (num) => {
  // Проверяем, что число положительное
  if (num < 1) {
    return false; // Отрицательные числа и ноль не являются натуральными степенями тройки
  }

  // Используем цикл, чтобы делить число на 3
  while (num % 3 === 0) {
    num /= 3; // Делим число на 3 до тех пор, пока оно делится на 3
  }

  // После цикла, проверяем, стало ли число равным 1
  return num === 1;
};

export default isPowerOfThree;

/*Теперь пошаговое объяснение:
Проверка на положительное число (if (num < 1) { return false; }):
Функция начинает с проверки, является ли переданное число num положительным. Если число меньше 1 (включая отрицательные числа и 0), функция возвращает false, так как отрицательные числа и 0 не являются натуральными степенями тройки.
Цикл деления на 3 (while (num % 3 === 0) { num /= 3; }):
В случае положительного числа, используется цикл while, который выполняется до тех пор, пока число num делится на 3 (остаток от деления равен 0).
Внутри цикла число num делится на 3.
Проверка, стало ли число равным 1 (return num === 1;):
После завершения цикла, проверяется, стало ли число num равным 1. Если да, то изначальное число было натуральной степенью тройки и функция возвращает true. Если нет, то число не является натуральной степенью тройки, и функция возвращает false.
*/

//replit
const isPowerOfThree = (num) => {
  let result = 1;
  let i = 0;
  while (result < num) {
    result = result * 3;
    i = i + 1;
  }
  return result === num && i > 0;
};

console.log(isPowerOfThree(2));

/*Теперь пошаговое объяснение:
Инициализация переменных (let result = 1; и let i = 0;):
result - переменная, в которой хранится текущее значение тройки в степени i.
i - переменная, представляющая экспоненту степени тройки.
Цикл (while (result < num) { ... }):
Цикл продолжается, пока текущая степень тройки (result) меньше переданного числа num.
Внутри цикла увеличивается степень тройки (result = result * 3) и экспонента (i = i + 1).
Проверка на натуральную степень тройки (return result === num && i > 0;):
После завершения цикла проверяется, равна ли result переданному числу num и при этом экспонента i больше 0.
Если оба условия выполняются, то число num является натуральной степенью тройки.
Пример использования (console.log(isPowerOfThree(2));):
В этом примере вызывается функция с аргументом 2.
Функция вернет false, так как 2 не является натуральной степенью тройки.
Эта реализация проверяет, является ли переданное число натуральной степенью тройки, используя цикл для пошагового увеличения степени тройки до тех пор, пока не будет достигнуто или превышено значение num.
*/